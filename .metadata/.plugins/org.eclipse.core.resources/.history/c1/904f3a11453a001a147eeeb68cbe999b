package com.shd.common.properties;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.stream.Collectors;


//https://www.geeksforgeeks.org/java-8-biconsumer-interface-in-java-with-examples/
public class ReadAndCaptureProps {
	@FunctionalInterface
	public interface Function3  
	{	
		Map<String, String> applyIt(String str1, String str2); 
	} ;
	
public	Function3 readAndUpdProprsi = (propsDir, propFileName) -> 
    { 
    	Path filePath = Paths.get(propsDir.trim(), propFileName.trim());
    	Map<String, String> hashMap = new HashMap<>();
        System.out.println("PropFile=[" +filePath.toString() +"]") ;
         try {
			Files.lines(filePath)
			 .filter(str-> !str.startsWith("#"))
			.forEach(line -> {
				String[] str2 = line.split("=") ;
				 hashMap.put(str2[0].trim(), str2[1].trim()) ;
			}	
			);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
return hashMap ;
    	
    } ;


@SuppressWarnings("rawtypes")
public Function<Map<String,String>,String> displpropi = (mapH)  -> {
	String dispProps = mapH.entrySet() 
			         .stream()
			         .map(e -> e.getKey() + "=\"" + e.getValue() + "\"" )
			         .collect(Collectors.joining("\n"));	
	return dispProps ;
	
	
}  ;

}

