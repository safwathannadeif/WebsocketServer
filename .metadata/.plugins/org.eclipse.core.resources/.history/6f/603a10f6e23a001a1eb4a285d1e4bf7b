package com.shd.gen.rwfiles;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

//import com.shd.server.Ref2Singleton;

public class WriteReqRespJsonMsgs {
	
	private  String   dirPrefix= "ReqResp_" ;
	private  String   inpHeader = "C:/WebSockt_WrkDirec/Server/ReqRespMsgs" ;
	private  Path   useReqPath =  null ;
	private  Path   useRespPath =  null ;
	
	public static void main(String[] args) throws IOException {
		WriteReqRespJsonMsgs ws = new WriteReqRespJsonMsgs() ;
		ws.createNewDirs() ;
	}
	
	public void createNewDirs() throws IOException
	{
		int iRetMax =getNextSeqForWrite(getInpHeader()) ;
		String newDirec = getInpHeader()+"/"+getDirPrefix()+String.valueOf(iRetMax+1) ;
		Path pathNew = Paths.get(newDirec);
		Files.createDirectories(pathNew);
		System.out.println("WriteReqRespJsonMsgs Enabled and Create the newDirectory =[" + newDirec + "]" ) ;
		Path pathNewReq = Paths.get(newDirec+"/Req");
		Files.createDirectories(pathNewReq);
		System.out.println("WriteReqRespJsonMsgs Create the ReqNewDirectory =[" + pathNewReq + "]" ) ;
		setReqPath(pathNewReq);
		Path pathNewResp = Paths.get(newDirec+"/Resp");
		Files.createDirectories(pathNewResp);
		System.out.println("WriteReqRespJsonMsgs Create the RespNewDirectory =[" + pathNewResp + "]" ) ;
		
		
		
	}
	private int getNextSeqForWrite(String fqDirName) throws IOException
	{
		//Pattern ReqResp_nn we need to the Max nn for ReqResp Directories
		
		Stream<Path> walk = Files.walk(Paths.get(fqDirName)) ;
		int maxToRet =  walk.filter(Files::isDirectory)
				    //.peek(xxxx -> System.out.println("xxxx.toString()" + xxxx.toString()))
					.map(x -> x.getFileName().toString() )
					.filter(f -> f.contains(dirPrefix))
					//.peek(fn -> System.out.println("fnOnly[" + fn +']'))
					//.mapToInt(xx -> Integer.valueOf(xx.substring(xx.indexOf("_") +1)))
					.mapToInt(xx -> Integer.valueOf(xx.replace(dirPrefix, "")))
					// .peek(iii -> System.out.println("iii" + iii ))
				    .max().orElse(0) ;
	  return maxToRet ;
	}
	public void setDirPrefix(String filePrefix) {
		this.dirPrefix = filePrefix;
	}
	public void setInpHeader(String inpHeader) {
		this.inpHeader = inpHeader;
	}
	public String getDirPrefix () 
	{
		return dirPrefix;
	}

	public String getInpHeader() {
		return inpHeader;
	}

	public Path getUseReqPath() {
		return useReqPath;
	}

	public void setUseReqPath(Path useReqPath) {
		this.useReqPath = useReqPath;
	}

	public Path getUseRespPath() {
		return useRespPath;
	}

	public void setUseRespPath(Path useRespPath) {
		this.useRespPath = useRespPath;
	}

	
	

}
