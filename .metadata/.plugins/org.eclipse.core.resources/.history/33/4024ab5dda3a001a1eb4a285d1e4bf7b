package com.shd.gen.rwfiles;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

//import com.shd.server.Ref2Singleton;

public class WriteReqRespJsonMsgs {
	static String filePrefix= "ReqResp_" ;
	static String   inpHeader = "C:/WebSockt_WrkDirec/Server/ReqRespMsgs" ;
	public static void main(String[] args) throws IOException {
		WriteReqRespJsonMsgs writeReqRespJsonMsgs = new WriteReqRespJsonMsgs() ;
		int iRetMax =writeReqRespJsonMsgs.getNextSeqForWrite(inpHeader) ;
		System.out.println("iRetMax =" + iRetMax ) ;
		String newDirec = inpHeader+"/"+filePrefix+String.valueOf(iRetMax+1) ;
		Path pathNew = Paths.get(newDirec);
		Files.createDirectories(pathNew);
		System.out.println("Created =[" + newDirec + "]" ) ;
	}
	
	public void prepReqAndResDir(String headerdir) throws IOException
	{
		// Passing headerDir something like: C:/WebSockt_WrkDirec/Server/ReqRespMsgs
		// Create next ReqResp_NN+1 under header dir where NN is the max found under the headerdir
		
		
//		chkOroCreateSunDirec(headerdir+"/ReqResp") ;
//		chkOroCreateSunDirec(headerdir+"/ReqResp/Req") ;
//		chkOroCreateSunDirec(headerdir+"/ReqResp/Resp") ;
//		
	}
	private void chkOroCreateSubDirec(String fqDirName) throws IOException
	{
		Path path = Paths.get(fqDirName);
        //if directory exists?
        if (!Files.exists(path))  Files.createDirectories(path);
	}
	private int getNextSeqForWrite(String fqDirName) throws IOException
	{
		//Pattern ReqResp_nn we need to the Max nn for ReqResp Directories
		
		Stream<Path> walk = Files.walk(Paths.get(fqDirName)) ;
		int maxToRet =  walk.filter(Files::isDirectory)
				    .peek(xxxx -> System.out.println("xxxx.toString()" + xxxx.toString()))
					.map(x -> x.getFileName().toString() )
					.filter(f -> f.contains(filePrefix))
					.peek(fn -> System.out.println("fnOnly[" + fn +']'))
					//.mapToInt(xx -> Integer.valueOf(xx.substring(xx.indexOf("_") +1)))
					.mapToInt(xx -> Integer.valueOf(xx.replace(filePrefix, "")))
					 .peek(iii -> System.out.println("iii" + iii ))
				    .max().orElse(0) ;
	  return maxToRet ;
	}
	

}
